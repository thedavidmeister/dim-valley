{:rename-macros {}, :renames {}, :externs {Error {}, Math {cos {}, sin {}, PI {}, abs {}}}, :use-macros {are cljs.test, is cljs.test, deftest cljs.test}, :excludes #{}, :name wheel.math.geometry, :imports nil, :requires {cljs.test cljs.test}, :uses nil, :defs {polar->cartesian {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/nxb/-vrjyef/index.html.out/wheel/math/geometry.cljs", :line 5, :column 7, :end-line 5, :end-column 23, :arglists (quote ([radius radians])), :doc "Given a radius (unitless) and rotation in radians, returns (unitless) [x y] co-ordinates"}, :name wheel.math.geometry/polar->cartesian, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/nxb/-vrjyef/index.html.out/wheel/math/geometry.cljs", :end-column 23, :method-params ([radius radians]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 2, :fn-var true, :arglists (quote ([radius radians])), :doc "Given a radius (unitless) and rotation in radians, returns (unitless) [x y] co-ordinates"}, degrees->radians {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/nxb/-vrjyef/index.html.out/wheel/math/geometry.cljs", :line 13, :column 7, :end-line 13, :end-column 23, :arglists (quote ([degrees])), :doc "Given a rotation in degrees, returns the same rotation in radians"}, :name wheel.math.geometry/degrees->radians, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/nxb/-vrjyef/index.html.out/wheel/math/geometry.cljs", :end-column 23, :method-params ([degrees]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([degrees])), :doc "Given a rotation in degrees, returns the same rotation in radians"}, radians->degrees {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/nxb/-vrjyef/index.html.out/wheel/math/geometry.cljs", :line 18, :column 7, :end-line 18, :end-column 23, :arglists (quote ([radians])), :doc "Given a rotation in radians, returns the same rotation in degrees"}, :name wheel.math.geometry/radians->degrees, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/nxb/-vrjyef/index.html.out/wheel/math/geometry.cljs", :end-column 23, :method-params ([radians]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([radians])), :doc "Given a rotation in radians, returns the same rotation in degrees"}, ??polar->cartesian {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/nxb/-vrjyef/index.html.out/wheel/math/geometry.cljs", :line 25, :column 10, :end-line 25, :end-column 28}, :name wheel.math.geometry/??polar->cartesian, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/nxb/-vrjyef/index.html.out/wheel/math/geometry.cljs", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 25, :end-line 25, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, ??degrees->radians {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/nxb/-vrjyef/index.html.out/wheel/math/geometry.cljs", :line 58, :column 10, :end-line 58, :end-column 28}, :name wheel.math.geometry/??degrees->radians, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/nxb/-vrjyef/index.html.out/wheel/math/geometry.cljs", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 58, :end-line 58, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, ??radians->degrees {:protocol-inline nil, :meta {:file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/nxb/-vrjyef/index.html.out/wheel/math/geometry.cljs", :line 74, :column 10, :end-line 74, :end-column 28}, :name wheel.math.geometry/??radians->degrees, :variadic false, :file "/Users/davidmeister/.boot/cache/tmp/Users/davidmeister/dim-valley/nxb/-vrjyef/index.html.out/wheel/math/geometry.cljs", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 74, :end-line 74, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}}, :require-macros {cljs.test cljs.test}, :cljs.analyzer/constants {:seen #{x ??polar->cartesian wheel.math.geometry/??radians->degrees ??degrees->radians = js/Math radians degrees .-PI y pi :ns :name * :file .cos :end-column :type :column xo - :fail polar->cartesian .sin :line not within-tolerance? radius :expected / angle :end-line :error :pass :arglists radians->degrees :actual :doc == degrees->radians wheel.math.geometry/??polar->cartesian yo :test ??radians->degrees :message wheel.math.geometry wheel.math.geometry/??degrees->radians}, :order [:type :expected :actual :message :error = * radius .cos js/Math angle .sin polar->cartesian :pass :fail not within-tolerance? - xo x yo y wheel.math.geometry/??polar->cartesian :ns :name :file :end-column :column :line :end-line :arglists :doc :test wheel.math.geometry ??polar->cartesian == degrees->radians degrees / .-PI pi wheel.math.geometry/??degrees->radians ??degrees->radians radians->degrees radians wheel.math.geometry/??radians->degrees ??radians->degrees]}, :doc nil}